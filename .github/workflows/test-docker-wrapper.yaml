name: Docker Wrapper Regression Tests (GIVEN-WHEN-THEN)
permissions:
  contents: read

on:
  workflow_dispatch:
  push:
  pull_request:
    branches: [master]
    paths:
      - 'actions/docker-wrapper/**'
      - '.github/workflows/test-docker-wrapper-regression.yml'

jobs:
  docker-wrapper-tests:
    name: Docker Wrapper Action - Numbered Testcases (Given-When-Then)
    runs-on: ubuntu-latest

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: shared-library

      # ================= TC01 â€“ TC14 already defined =================
      # (Use the TC01â€“TC14 steps you already provided)

      # --- TC15: Scan enabled, image exists ---
      - name: "TC15-GIVEN: Image built, scan enabled"
        run: |
          mkdir -p tc15
          echo "FROM alpine:3.18" > tc15/Dockerfile
          docker pull alpine:3.18
          docker tag alpine:3.18 localhost:5000/test-image:tc15
          echo "GHA_CICD_DOCKERFILE_PATH=tc15/Dockerfile" > tc15/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=tc15" >> tc15/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc15/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc15," >> tc15/docker.properties

      - name: "TC15-WHEN: docker-wrapper run with scan only"
        id: tc15_scan
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "false"
          run_build: "false"
          run_test: "false"
          run_scan: "true"
          run_publish: "false"
          properties_path: "tc15/docker.properties"

      - name: "TC15-THEN: scan_status should be 'success'"
        env:
          scan_status: ${{ steps.tc15_scan.outputs.scan_status }}
        run: |
          if [ "$scan_status" != "success" ]; then
            exit 1
          fi

      # --- TC16: Scan enabled, image missing ---
      - name: "TC16-GIVEN: Scan enabled but image does not exist"
        run: |
          mkdir -p tc16
          echo "FROM alpine:3.18" > tc16/Dockerfile
          echo "GHA_CICD_DOCKERFILE_PATH=tc16/Dockerfile" > tc16/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=tc16" >> tc16/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc16/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc16," >> tc16/docker.properties

      - name: "TC16-WHEN: docker-wrapper run with scan enabled"
        id: tc16_scan_fail
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "false"
          run_build: "false"
          run_test: "false"
          run_scan: "true"
          run_publish: "false"
          properties_path: "tc16/docker.properties"

      - name: "TC16-THEN: scan_status should be 'failure'"
        env:
          scan_status: ${{ steps.tc16_scan_fail.outputs.scan_status }}
        run: |
          if [ "$scan_status" != "failure" ]; then
            exit 1
          fi

      # --- TC17: DGOSS test invalid syntax ---
      - name: "TC17-GIVEN: Invalid goss test file"
        run: |
          mkdir -p tc17
          echo "FROM alpine:3.18" > tc17/Dockerfile
          echo -e "invalid_syntax" > tc17/goss.yaml
          echo "GHA_CICD_DOCKERFILE_PATH=tc17/Dockerfile" > tc17/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=tc17" >> tc17/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc17/docker.properties
          echo "GHA_CICD_DGOSS_TEST_FILE=tc17/goss.yaml" >> tc17/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc17," >> tc17/docker.properties

      - name: "TC17-WHEN: docker-wrapper run with build and test"
        id: tc17_test_invalid
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "false"
          run_build: "true"
          run_test: "true"
          run_scan: "false"
          run_publish: "false"
          properties_path: "tc17/docker.properties"

      - name: "TC17-THEN: test_status should be 'failure'"
        env:
          test_status: ${{ steps.tc17_test_invalid.outputs.test_status }}
        run: |
          if [ "$test_status" != "failure" ]; then
            exit 1
          fi

      # --- TC18: Docker build fails invalid base image ---
      - name: "TC18-GIVEN: Dockerfile with invalid base image"
        run: |
          mkdir -p tc18
          echo "FROM invalidbase:latest" > tc18/Dockerfile
          echo "GHA_CICD_DOCKERFILE_PATH=tc18/Dockerfile" > tc18/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=tc18" >> tc18/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc18/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc18," >> tc18/docker.properties

      - name: "TC18-WHEN: docker-wrapper run with build enabled"
        id: tc18_build_fail
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "false"
          run_build: "true"
          run_test: "false"
          run_scan: "false"
          run_publish: "false"
          properties_path: "tc18/docker.properties"

      - name: "TC18-THEN: build_status should be 'failure'"
        env:
          build_status: ${{ steps.tc18_build_fail.outputs.build_status }}
        run: |
          if [ "$build_status" != "failure" ]; then
            exit 1
          fi

      # --- TC19: Publish fails due to registry unreachable ---
      - name: "TC19-GIVEN: Dockerfile exists, unreachable registry"
        run: |
          mkdir -p tc19
          echo "FROM alpine:3.18" > tc19/Dockerfile
          echo "GHA_CICD_DOCKERFILE_PATH=tc19/Dockerfile" > tc19/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=tc19" >> tc19/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc19/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5999/test-image:tc19," >> tc19/docker.properties

      - name: "TC19-WHEN: docker-wrapper run with publish only"
        id: tc19_publish_fail
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "false"
          run_build: "false"
          run_test: "false"
          run_scan: "false"
          run_publish: "true"
          properties_path: "tc19/docker.properties"

      - name: "TC19-THEN: publish_status should be 'failure'"
        env:
          publish_status: ${{ steps.tc19_publish_fail.outputs.publish_status }}
        run: |
          if [ "$publish_status" != "failure" ]; then
            exit 1
          fi

      # --- TC20: All steps enabled, partial secrets missing ---
      - name: "TC20-GIVEN: Missing DGOSS test file secret"
        run: |
          mkdir -p tc20
          echo "FROM alpine:3.18" > tc20/Dockerfile
          echo "GHA_CICD_DOCKERFILE_PATH=tc20/Dockerfile" > tc20/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=tc20" >> tc20/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc20/docker.properties
          # DGOSS test file missing intentionally
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc20," >> tc20/docker.properties

      - name: "TC20-WHEN: docker-wrapper run with all steps enabled"
        id: tc20_partial_missing
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "true"
          run_build: "true"
          run_test: "true"
          run_scan: "true"
          run_publish: "true"
          properties_path: "tc20/docker.properties"

      - name: "TC20-THEN: lint/build should succeed, test/scan may fail, publish skipped"
        env:
          lint_status: ${{ steps.tc20_partial_missing.outputs.lint_status }}
          build_status: ${{ steps.tc20_partial_missing.outputs.build_status }}
          test_status: ${{ steps.tc20_partial_missing.outputs.test_status }}
          scan_status: ${{ steps.tc20_partial_missing.outputs.scan_status }}
          publish_status: ${{ steps.tc20_partial_missing.outputs.publish_status }}
        run: |
          if [ "$lint_status" != "success" ]; then exit 1; fi
          if [ "$build_status" != "success" ]; then exit 1; fi
          if [ "$publish_status" != "skipped" ]; then exit 1; fi
