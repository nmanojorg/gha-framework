# Regression test workflow for Docker Wrapper (well-structured, logical order, improved comments/names)
name: Docker Wrapper Regression Tests (GIVEN-WHEN-THEN)
permissions:
  contents: read

on:
  workflow_dispatch:
  push:
  pull_request:
    branches: [master]
    paths:
      - 'actions/docker-wrapper/**'
      - '.github/workflows/test-docker-wrapper-regression.yml'

jobs:
  docker-wrapper-tests:
    name: Docker Wrapper Action - Regression Scenarios (Given-When-Then)
    runs-on: ubuntu-latest

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Checkout shared library
        uses: actions/checkout@v4
        with:
          path: shared-library

      ########################################################################
      # TC01: Validate invalid run_lint value (should skip all)
      ########################################################################
      - name: "TC01-GIVEN: Valid Dockerfile, run_lint set to invalid value"
        run: |
          mkdir -p tc01
          echo "FROM alpine:3.18" > tc01/Dockerfile
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc01," > tc01/docker.properties

      - name: "TC01-WHEN: Run docker-wrapper with run_lint='trueth' (not boolean string)"
        id: tc01_invalid_boolean
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        env:
          GHA_CICD_DOCKERFILE_PATH: tc01/Dockerfile
          GHA_CICD_DOCKER_CONTEXT: tc01
        with:
          run_lint: "trueth"
          run_build: "false"
          run_test: "false"
          run_scan: "false"
          run_publish: "false"
          properties_path: "tc01/docker.properties"

      - name: "TC01-THEN: All outputs should be 'skipped' (invalid boolean disables all steps)"
        env:
          lint_status: ${{ steps.tc01_invalid_boolean.outputs.lint_status }}
          build_status: ${{ steps.tc01_invalid_boolean.outputs.build_status }}
          test_status: ${{ steps.tc01_invalid_boolean.outputs.test_status }}
          scan_status: ${{ steps.tc01_invalid_boolean.outputs.scan_status }}
          publish_status: ${{ steps.tc01_invalid_boolean.outputs.publish_status }}
        run: |
          for step in lint_status build_status test_status scan_status publish_status; do
            if [ "${!step}" != "skipped" ]; then
              echo "Expected $step to be 'skipped' when run_lint is invalid."
              exit 1
            fi
          done

      ########################################################################
      # TC02: Validate invalid properties file path (should skip all)
      ########################################################################
      - name: "TC02-GIVEN: Valid Dockerfile, but properties file path is invalid"
        run: |
          mkdir -p tc02
          echo "FROM alpine:3.18" > tc02/Dockerfile

      - name: "TC02-WHEN: Run docker-wrapper with invalid properties file path"
        id: tc02_invalid_properties_path
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "true"
          run_build: "true"
          run_test: "false"
          run_scan: "false"
          run_publish: "false"
          properties_path: "tc02/thisfiledoesnotexist.properties"

      - name: "TC02-THEN: All outputs should be 'skipped' (missing properties disables all steps)"
        env:
          lint_status: ${{ steps.tc02_invalid_properties_path.outputs.lint_status }}
          build_status: ${{ steps.tc02_invalid_properties_path.outputs.build_status }}
          test_status: ${{ steps.tc02_invalid_properties_path.outputs.test_status }}
          scan_status: ${{ steps.tc02_invalid_properties_path.outputs.scan_status }}
          publish_status: ${{ steps.tc02_invalid_properties_path.outputs.publish_status }}
        run: |
          for step in lint_status build_status test_status scan_status publish_status; do
            val="${!step}"
            if [ "$val" != "skipped" ]; then
              echo "Expected $step to be 'skipped' when properties file path is invalid."
              exit 1
            fi
          done

      ########################################################################
      # TC03: Missing properties file - Initial validation (all steps skipped)
      ########################################################################
      - name: "TC03-GIVEN: Dockerfile exists but properties file missing"
        run: |
          mkdir -p tc03
          echo "FROM alpine:3.18" > tc03/Dockerfile

      - name: "TC03-WHEN: Run docker-wrapper with missing properties file"
        id: tc03_missing_properties
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "true"
          run_build: "true"
          run_test: "false"
          run_scan: "false"
          run_publish: "false"
          properties_path: "tc03/missing.properties"

      - name: "TC03-THEN: All outputs should be 'skipped' (nothing runs)"
        env:
          lint_status: ${{ steps.tc03_missing_properties.outputs.lint_status }}
          build_status: ${{ steps.tc03_missing_properties.outputs.build_status }}
          test_status: ${{ steps.tc03_missing_properties.outputs.test_status }}
          scan_status: ${{ steps.tc03_missing_properties.outputs.scan_status }}
          publish_status: ${{ steps.tc03_missing_properties.outputs.publish_status }}
        run: |
          for step in lint_status build_status test_status scan_status publish_status; do
            val="${!step}"
            echo "$step=$val"
            if [ "$val" != "skipped" ]; then
              echo "Expected $step to be 'skipped' when properties file is missing."
              exit 1
            fi
          done

      ########################################################################
      # TC04: All steps disabled - Initial validation (all outputs skipped)
      ########################################################################
      - name: "TC04-GIVEN: Valid Dockerfile, all steps disabled"
        run: |
          mkdir -p tc04
          echo "FROM alpine:3.18" > tc04/Dockerfile
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc04," > tc04/docker.properties

      - name: "TC04-WHEN: Run docker-wrapper with all steps disabled"
        id: tc04_all_disabled
        uses: ./shared-library/.github/actions/docker-wrapper
        env:
          GHA_CICD_DOCKERFILE_PATH: tc04/Dockerfile
          GHA_CICD_DOCKER_CONTEXT: tc04
        with:
          run_lint: "false"
          run_build: "false"
          run_test: "false"
          run_scan: "false"
          run_publish: "false"
          properties_path: "tc04/docker.properties"

      - name: "TC04-THEN: All outputs should be 'skipped' (no actions run)"
        env:
          lint_status: ${{ steps.tc04_all_disabled.outputs.lint_status }}
          build_status: ${{ steps.tc04_all_disabled.outputs.build_status }}
          test_status: ${{ steps.tc04_all_disabled.outputs.test_status }}
          scan_status: ${{ steps.tc04_all_disabled.outputs.scan_status }}
          publish_status: ${{ steps.tc04_all_disabled.outputs.publish_status }}
        run: |
          for step in lint_status build_status test_status scan_status publish_status; do
            if [ "${!step}" != "skipped" ]; then
              echo "Expected $step to be 'skipped' when all steps are disabled."
              exit 1
            fi
          done

      ########################################################################
      # TC05: Lint failure - Invalid FROM case (functional validation)
      ########################################################################
      - name: "TC05-GIVEN: Dockerfile with invalid FROM case"
        run: |
          mkdir -p tc05
          echo "FrOM alpine:3.18" > tc05/Dockerfile
          echo "GHA_CICD_DOCKERFILE_PATH=tc05/Dockerfile" > tc05/docker.properties

      - name: "TC05-WHEN: Run docker-wrapper with lint enabled"
        id: tc05_lint_fail
        uses: ./shared-library/.github/actions/docker-wrapper
        env:
          GHA_CICD_DOCKER_CONTEXT: tc05
        continue-on-error: true
        with:
          run_lint: "true"
          run_build: "false"
          run_test: "false"
          run_scan: "false"
          run_publish: "false"
          properties_path: "tc05/docker.properties"

      - name: "TC05-THEN: lint_status should be 'failure', others 'skipped'"
        env:
          lint_status: ${{ steps.tc05_lint_fail.outputs.lint_status }}
          build_status: ${{ steps.tc05_lint_fail.outputs.build_status }}
          test_status: ${{ steps.tc05_lint_fail.outputs.test_status }}
          scan_status: ${{ steps.tc05_lint_fail.outputs.scan_status }}
          publish_status: ${{ steps.tc05_lint_fail.outputs.publish_status }}
        run: |
          if [ "$lint_status" != "failure" ]; then
            echo "Expected lint_status to be 'failure' for invalid FROM case."
            exit 1
          fi
          for step in build_status test_status scan_status publish_status; do
            if [ "${!step}" != "skipped" ]; then
              echo "Expected $step to be 'skipped' after lint failure."
              exit 1
            fi
          done

      ########################################################################
      # TC06: Build failure - Missing context directory (functional validation)
      ########################################################################
      - name: "TC06-GIVEN: Dockerfile present, context directory missing"
        run: |
          mkdir -p tc06
          echo "FROM alpine:3.18" > tc06/Dockerfile
          echo "GHA_CICD_DOCKERFILE_PATH=tc06/Dockerfile" > tc06/docker.properties

      - name: "TC06-WHEN: Run docker-wrapper with build enabled and missing context"
        id: tc06_context_missing
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        env:
          GHA_CICD_DOCKER_CONTEXT: tc06_missing
        with:
          run_lint: "false"
          run_build: "true"
          run_test: "false"
          run_scan: "false"
          run_publish: "false"
          properties_path: "tc06/docker.properties"

      - name: "TC06-THEN: build_status should be 'failure', others 'skipped'"
        env:
          lint_status: ${{ steps.tc06_context_missing.outputs.lint_status }}
          build_status: ${{ steps.tc06_context_missing.outputs.build_status }}
          test_status: ${{ steps.tc06_context_missing.outputs.test_status }}
          scan_status: ${{ steps.tc06_context_missing.outputs.scan_status }}
          publish_status: ${{ steps.tc06_context_missing.outputs.publish_status }}
        run: |
          if [ "$build_status" != "failure" ]; then
            echo "Expected build_status to be 'failure' when context is missing."
            exit 1
          fi
          for step in lint_status test_status scan_status publish_status; do
            if [ "${!step}" != "skipped" ]; then
              echo "Expected $step to be 'skipped' when build fails."
              exit 1
            fi
          done

      ########################################################################
      # TC07: Test failure - Goss assertion fails (functional validation)
      ########################################################################
      - name: "TC07-GIVEN: Valid Dockerfile, test file exists but assertion fails"
        run: |
          mkdir -p tc07
          echo "FROM alpine:3.18" > tc07/Dockerfile
          echo -e "file:\n  /notexist:\n    exists: true" > tc07/goss.yaml

      - name: "TC07-WHEN: Run docker-wrapper with build and test enabled"
        id: tc07_test_fail_assert
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        env:
          GHA_CICD_DOCKERFILE_PATH: tc07/Dockerfile
          GHA_CICD_DOCKER_CONTEXT: tc07
          GHA_CICD_DOCKER_CONFIG_JSON: "${{ secrets.DOCKER_CONFIG_JSON }}"
          GHA_CICD_DGOSS_TEST_FILE: tc07/goss.yaml
          GHA_CICD_DOCKER_IMAGE_URLS: "localhost:5000/test-image:tc07,"
        with:
          run_lint: "false"
          run_build: "true"
          run_test: "true"
          run_scan: "false"
          run_publish: "false"

      - name: "TC07-THEN: test_status should be 'failure', build_status 'success', publish_status 'skipped'"
        env:
          build_status: ${{ steps.tc07_test_fail_assert.outputs.build_status }}
          test_status: ${{ steps.tc07_test_fail_assert.outputs.test_status }}
          publish_status: ${{ steps.tc07_test_fail_assert.outputs.publish_status }}
        run: |
          if [ "$test_status" != "failure" ]; then
            echo "Expected test_status to be 'failure' due to assertion error."
            exit 1
          fi
          if [ "$build_status" != "success" ]; then
            echo "Expected build_status to be 'success'."
            exit 1
          fi
          if [ "$publish_status" != "skipped" ]; then
            echo "Expected publish_status to be 'skipped'."
            exit 1
          fi

      ########################################################################
      # TC08: End-to-end: all steps enabled, valid inputs (happy path)
      ########################################################################
      - name: "TC08-GIVEN: Valid Dockerfile, context, test file, build args (full pipeline)"
        run: |
          mkdir -p tc08
          echo -e "FROM alpine:3.18\nARG INPUT1\nARG INPUT2\nCMD echo \"Input 1: \$INPUT1, Input 2: \$INPUT2\" " > tc08/Dockerfile
          echo -e "file:\n  /bin/sh:\n    exists: true" > tc08/goss.yaml
          echo -e "INPUT1=fileInput1\nINPUT2=fileInput2" > tc08/build-args.txt
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc08," > tc08/docker.properties

      - name: "TC08-WHEN: Run docker-wrapper with all steps enabled"
        id: tc08_all_enabled
        uses: ./shared-library/.github/actions/docker-wrapper
        env:
          GHA_CICD_DOCKERFILE_PATH: tc08/Dockerfile
          GHA_CICD_DOCKER_CONTEXT: tc08
          GHA_CICD_DOCKER_CONFIG_JSON: "${{ secrets.DOCKER_CONFIG_JSON }}"
          GHA_CICD_DGOSS_TEST_FILE: tc08/goss.yaml
          GHA_CICD_DOCKERFILE_LINT_SKIP_CHECKS: "ConsistentInstructionCasing,StageNameCasing,JSONArgsRecommended "
          GHA_CICD_DOCKER_BUILD_ARGS: "INPUT1=envInput1 INPUT2=envInput2"
          GHA_CICD_DOCKER_BUILD_ARGS_FILE: tc08/build-args.txt
        with:
          run_lint: "true"
          run_build: "true"
          run_test: "true"
          run_scan: "false"      # TODO: enable
          run_publish: "true"
          properties_path: "tc08/docker.properties"

      - name: "TC08-THEN: All outputs should be 'success' (full pipeline runs)"
        env:
          lint_status: ${{ steps.tc08_all_enabled.outputs.lint_status }}
          build_status: ${{ steps.tc08_all_enabled.outputs.build_status }}
          test_status: ${{ steps.tc08_all_enabled.outputs.test_status }}
          scan_status: ${{ steps.tc08_all_enabled.outputs.scan_status }}
          publish_status: ${{ steps.tc08_all_enabled.outputs.publish_status }}
        run: |
          for step in lint_status build_status test_status scan_status publish_status; do
            val="${!step}"
            echo "$step=$val"
            if [ "$step" = "scan_status" ] ; then # TODO: remove
              continue
            fi
            if [ "$val" != "success" ]; then
              echo "Expected $step to be 'success'."
              exit 1
            fi
          done

      ########################################################################
      # TC09: Scan step with missing credentials (should fail)
      ########################################################################
      - name: "TC09-GIVEN: Valid Dockerfile, missing apro username/password"
        run: |
          mkdir -p tc09
          echo "FROM alpine:3.18" > tc09/Dockerfile
          echo "GHA_CICD_DOCKERFILE_PATH=tc09/Dockerfile" > tc09/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=tc09" >> tc09/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc09/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc09," >> tc09/docker.properties
          # No APRO username/password

      - name: "TC09-WHEN: Run docker-wrapper with scan enabled, missing credentials"
        id: tc09_scan_missing_creds
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "false"
          run_build: "true"
          run_test: "false"
          run_scan: "true"
          run_publish: "false"
          properties_path: "tc09/docker.properties"

      - name: "TC09-THEN: scan_status should be 'failure'"
        env:
          scan_status: ${{ steps.tc09_scan_missing_creds.outputs.scan_status }}
        run: |
          if [ "$scan_status" != "failure" ]; then
            exit 1
          fi

      ########################################################################
      # TC10: Build is skipped, so scan and test are skipped
      ########################################################################
      - name: "TC10-GIVEN: Valid Dockerfile, build step skipped"
        run: |
          mkdir -p tc10
          echo "FROM alpine:3.18" > tc10/Dockerfile
          echo "GHA_CICD_DOCKERFILE_PATH=tc10/Dockerfile" > tc10/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=tc10" >> tc10/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc10/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc10," >> tc10/docker.properties

      - name: "TC10-WHEN: Run docker-wrapper with scan and test enabled, but build disabled"
        id: tc10_scan_no_build
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "false"
          run_build: "false"
          run_test: "true"
          run_scan: "true"
          run_publish: "false"
          properties_path: "tc10/docker.properties"

      - name: "TC10-THEN: build_status, scan_status, test_status should all be 'skipped'"
        env:
          build_status: ${{ steps.tc10_scan_no_build.outputs.build_status }}
          scan_status: ${{ steps.tc10_scan_no_build.outputs.scan_status }}
          test_status: ${{ steps.tc10_scan_no_build.outputs.test_status }}
        run: |
          for step in build_status scan_status test_status; do
            val="${!step}"
            if [ "$val" != "skipped" ]; then
              echo "Expected $step to be 'skipped' when build is not run."
              exit 1
            fi
          done

