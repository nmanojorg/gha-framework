name: Docker Wrapper Regression Tests (GIVEN-WHEN-THEN)
permissions:
  contents: read

on:
  workflow_dispatch:
  push:
  pull_request:
    branches: [master]
    paths:
      - 'actions/docker-wrapper/**'
      - '.github/workflows/test-docker-wrapper-regression.yml'

jobs:
  docker-wrapper-tests:
    name: Docker Wrapper Action - Numbered Testcases (Given-When-Then)
    runs-on: ubuntu-latest

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: shared-library

      # --- TC01: All steps enabled, valid inputs ---
      - name: "TC01-GIVEN: Valid Dockerfile, context and all required files"
        run: |
          mkdir -p tc01
          echo "FROM alpine:3.18" > tc01/Dockerfile
          echo -e "file:\n  /bin/sh:\n    exists: true" > tc01/goss.yaml
          echo "GHA_CICD_DOCKERFILE_PATH=tc01/Dockerfile" > tc01/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=." >> tc01/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc01/docker.properties
          echo "GHA_CICD_DGOSS_TEST_FILE=tc01/goss.yaml" >> tc01/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc01," >> tc01/docker.properties

      - name: "TC01-WHEN: docker-wrapper is run with all steps enabled"
        id: tc01_all_enabled
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "true"
          run_build: "true"
          run_test: "true"
          run_scan: "false"
          run_publish: "true"
          properties_path: "tc01/docker.properties"

      - name: "TC01-THEN: expect all outputs success"
        env:
          lint_status: ${{ steps.tc01_all_enabled.outputs.lint_status }}
          build_status: ${{ steps.tc01_all_enabled.outputs.build_status }}
          test_status: ${{ steps.tc01_all_enabled.outputs.test_status }}
          publish_status: ${{ steps.tc01_all_enabled.outputs.publish_status }}
        run: |
          for step in lint_status build_status test_status publish_status; do
            val="${!step}"
            echo "$step=$val"
            if [ "$val" != "success" ]; then
              echo "::error ::Step $step did not succeed!"
              exit 1
            fi
          done

      # --- TC02: Test step fails (assertion fails) ---
      - name: "TC02-GIVEN: Valid Dockerfile, test file exists but assertion fails"
        run: |
          mkdir -p tc02
          echo "FROM alpine:3.18" > tc02/Dockerfile
          echo -e "file:\n  /notexist:\n    exists: true" > tc02/goss.yaml
          echo "GHA_CICD_DOCKERFILE_PATH=tc02/Dockerfile" > tc02/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=." >> tc02/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc02/docker.properties
          echo "GHA_CICD_DGOSS_TEST_FILE=tc02/goss.yaml" >> tc02/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc02," >> tc02/docker.properties

      - name: "TC02-WHEN: docker-wrapper is run with build and test enabled"
        id: tc02_test_fail_assert
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "false"
          run_build: "true"
          run_test: "true"
          run_scan: "false"
          run_publish: "false"
          properties_path: "tc02/docker.properties"

      - name: "TC02-THEN: test_status should be failure"
        env:
          test_status: ${{ steps.tc02_test_fail_assert.outputs.test_status }}
        run: |
          echo "test_status=$test_status"
          if [ "$test_status" != "failure" ]; then
            echo "Test should fail due to assertion error"
            exit 1
          fi

      # --- TC03: Publish only, image exists ---
      - name: "TC03-GIVEN: Pre-existing image is tagged and available"
        run: |
          docker pull alpine:3.18
          docker tag alpine:3.18 localhost:5000/test-image:tc03
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc03," > tc03.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc03.properties

      - name: "TC03-WHEN: docker-wrapper is run with only publish enabled"
        id: tc03_publish_only
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "false"
          run_build: "false"
          run_test: "false"
          run_scan: "false"
          run_publish: "true"
          properties_path: "tc03.properties"

      - name: "TC03-THEN: publish_status should be success"
        env:
          publish_status: ${{ steps.tc03_publish_only.outputs.publish_status }}
        run: |
          echo "publish_status=$publish_status"
          if [ "$publish_status" != "success" ]; then
            echo "Publish should succeed for pre-existing image"
            exit 1
          fi

      # --- TC04: Multiple image URLs ---
      - name: "TC04-GIVEN: Dockerfile built, multiple image URLs"
        run: |
          mkdir -p tc04
          echo "FROM alpine:3.18" > tc04/Dockerfile
          echo "GHA_CICD_DOCKERFILE_PATH=tc04/Dockerfile" > tc04/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=." >> tc04/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=${{ secrets.DOCKER_CONFIG_JSON }}" >> tc04/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc04,localhost:5000/test-image:tc04-alt," >> tc04/docker.properties

      - name: "TC04-WHEN: docker-wrapper is run with build and publish enabled"
        id: tc04_multi_image
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "false"
          run_build: "true"
          run_test: "false"
          run_scan: "false"
          run_publish: "true"
          properties_path: "tc04/docker.properties"

      - name: "TC04-THEN: build_status and publish_status should be success"
        env:
          build_status: ${{ steps.tc04_multi_image.outputs.build_status }}
          publish_status: ${{ steps.tc04_multi_image.outputs.publish_status }}
        run: |
          if [ "$build_status" != "success" ]; then
            echo "Build should succeed"
            exit 1
          fi
          if [ "$publish_status" != "success" ]; then
            echo "Publish should succeed for multiple tags"
            exit 1
          fi

      # --- TC05: Properties file missing ---
      - name: "TC05-GIVEN: Missing properties file"
        run: echo "No properties file will be created for TC05"

      - name: "TC05-WHEN: docker-wrapper is run with missing properties file"
        id: tc05_missing_properties
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "true"
          run_build: "true"
          run_test: "false"
          run_scan: "false"
          run_publish: "false"
          properties_path: "tc05/missing.properties"

      - name: "TC05-THEN: lint_status should be failure"
        env:
          lint_status: ${{ steps.tc05_missing_properties.outputs.lint_status }}
        run: |
          echo "lint_status=$lint_status"
          if [ "$lint_status" != "failure" ]; then
            echo "Lint should fail due to missing properties"
            exit 1
          fi

      # --- TC06: Secret missing ---
      - name: "TC06-GIVEN: Valid Dockerfile, missing docker config secret"
        run: |
          mkdir -p tc06
          echo "FROM alpine:3.18" > tc06/Dockerfile
          echo "GHA_CICD_DOCKERFILE_PATH=tc06/Dockerfile" > tc06/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=." >> tc06/docker.properties
          echo "GHA_CICD_DGOSS_TEST_FILE=tc06/goss.yaml" >> tc06/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc06," >> tc06/docker.properties
          echo -e "file:\n  /bin/sh:\n    exists: true" > tc06/goss.yaml

      - name: "TC06-WHEN: docker-wrapper is run with missing secret"
        id: tc06_secret_missing
        continue-on-error: true
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "true"
          run_build: "true"
          run_test: "true"
          run_scan: "false"
          run_publish: "false"
          properties_path: "tc06/docker.properties"

      - name: "TC06-THEN: build_status should be failure"
        env:
          build_status: ${{ steps.tc06_secret_missing.outputs.build_status }}
        run: |
          echo "build_status=$build_status"
          if [ "$build_status" != "failure" ]; then
            echo "Build should fail due to missing secret"
            exit 1
          fi

      # --- TC07: Env variable override ---
      - name: "TC07-GIVEN: Properties file sets image, but env overrides it"
        run: |
          mkdir -p tc07
          echo "FROM alpine:3.18" > tc07/Dockerfile
          echo "GHA_CICD_DOCKERFILE_PATH=tc07/Dockerfile" > tc07/docker.properties
          echo "GHA_CICD_DOCKER_CONTEXT=." >> tc07/docker.properties
          echo "GHA_CICD_DOCKER_CONFIG_JSON=dummy" >> tc07/docker.properties
          echo "GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc07," >> tc07/docker.properties
          export GHA_CICD_DOCKER_IMAGE_URLS=localhost:5000/test-image:tc07-override,

      - name: "TC07-WHEN: docker-wrapper is run with build and publish enabled, env overrides image"
        id: tc07_env_override
        uses: ./shared-library/.github/actions/docker-wrapper
        with:
          run_lint: "false"
          run_build: "true"
          run_test: "false"
          run_scan: "false"
          run_publish: "true"
          properties_path: "tc07/docker.properties"

      - name: "TC07-THEN: build_status and publish_status should be success (env override)"
        env:
          build_status: ${{ steps.tc07_env_override.outputs.build_status }}
          publish_status: ${{ steps.tc07_env_override.outputs.publish_status }}
        run: |
          if [ "$build_status" != "success" ]; then
            echo "Build should succeed"
            exit 1
          fi
          if [ "$publish_status" != "success" ]; then
            echo "Publish should succeed for env override"
            exit 1
          fi

      # --- Add more test cases as needed (scan, registry unreachable, etc.) ---